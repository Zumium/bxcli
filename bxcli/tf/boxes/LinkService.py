#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def create(self, boxId, innerPath, destination, linkType):
        """
        Parameters:
         - boxId
         - innerPath
         - destination
         - linkType
        """
        pass

    def lsAll(self):
        pass

    def lsBox(self, boxId):
        """
        Parameters:
         - boxId
        """
        pass

    def lsInner(self, boxId, innerPath):
        """
        Parameters:
         - boxId
         - innerPath
        """
        pass

    def removeAll(self):
        pass

    def removeById(self, id):
        """
        Parameters:
         - id
        """
        pass

    def removeByBox(self, boxId):
        """
        Parameters:
         - boxId
        """
        pass

    def removeByInner(self, boxId, innerPath):
        """
        Parameters:
         - boxId
         - innerPath
        """
        pass

    def removeByDestination(self, destination):
        """
        Parameters:
         - destination
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def create(self, boxId, innerPath, destination, linkType):
        """
        Parameters:
         - boxId
         - innerPath
         - destination
         - linkType
        """
        self.send_create(boxId, innerPath, destination, linkType)
        self.recv_create()

    def send_create(self, boxId, innerPath, destination, linkType):
        self._oprot.writeMessageBegin('create', TMessageType.CALL, self._seqid)
        args = create_args()
        args.boxId = boxId
        args.innerPath = innerPath
        args.destination = destination
        args.linkType = linkType
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def lsAll(self):
        self.send_lsAll()
        return self.recv_lsAll()

    def send_lsAll(self):
        self._oprot.writeMessageBegin('lsAll', TMessageType.CALL, self._seqid)
        args = lsAll_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_lsAll(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = lsAll_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.excp is not None:
            raise result.excp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "lsAll failed: unknown result")

    def lsBox(self, boxId):
        """
        Parameters:
         - boxId
        """
        self.send_lsBox(boxId)
        return self.recv_lsBox()

    def send_lsBox(self, boxId):
        self._oprot.writeMessageBegin('lsBox', TMessageType.CALL, self._seqid)
        args = lsBox_args()
        args.boxId = boxId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_lsBox(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = lsBox_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.excp is not None:
            raise result.excp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "lsBox failed: unknown result")

    def lsInner(self, boxId, innerPath):
        """
        Parameters:
         - boxId
         - innerPath
        """
        self.send_lsInner(boxId, innerPath)
        return self.recv_lsInner()

    def send_lsInner(self, boxId, innerPath):
        self._oprot.writeMessageBegin('lsInner', TMessageType.CALL, self._seqid)
        args = lsInner_args()
        args.boxId = boxId
        args.innerPath = innerPath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_lsInner(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = lsInner_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.excp is not None:
            raise result.excp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "lsInner failed: unknown result")

    def removeAll(self):
        self.send_removeAll()
        self.recv_removeAll()

    def send_removeAll(self):
        self._oprot.writeMessageBegin('removeAll', TMessageType.CALL, self._seqid)
        args = removeAll_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeAll(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeAll_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def removeById(self, id):
        """
        Parameters:
         - id
        """
        self.send_removeById(id)
        self.recv_removeById()

    def send_removeById(self, id):
        self._oprot.writeMessageBegin('removeById', TMessageType.CALL, self._seqid)
        args = removeById_args()
        args.id = id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeById(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeById_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def removeByBox(self, boxId):
        """
        Parameters:
         - boxId
        """
        self.send_removeByBox(boxId)
        self.recv_removeByBox()

    def send_removeByBox(self, boxId):
        self._oprot.writeMessageBegin('removeByBox', TMessageType.CALL, self._seqid)
        args = removeByBox_args()
        args.boxId = boxId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeByBox(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeByBox_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def removeByInner(self, boxId, innerPath):
        """
        Parameters:
         - boxId
         - innerPath
        """
        self.send_removeByInner(boxId, innerPath)
        self.recv_removeByInner()

    def send_removeByInner(self, boxId, innerPath):
        self._oprot.writeMessageBegin('removeByInner', TMessageType.CALL, self._seqid)
        args = removeByInner_args()
        args.boxId = boxId
        args.innerPath = innerPath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeByInner(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeByInner_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def removeByDestination(self, destination):
        """
        Parameters:
         - destination
        """
        self.send_removeByDestination(destination)
        self.recv_removeByDestination()

    def send_removeByDestination(self, destination):
        self._oprot.writeMessageBegin('removeByDestination', TMessageType.CALL, self._seqid)
        args = removeByDestination_args()
        args.destination = destination
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_removeByDestination(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = removeByDestination_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["create"] = Processor.process_create
        self._processMap["lsAll"] = Processor.process_lsAll
        self._processMap["lsBox"] = Processor.process_lsBox
        self._processMap["lsInner"] = Processor.process_lsInner
        self._processMap["removeAll"] = Processor.process_removeAll
        self._processMap["removeById"] = Processor.process_removeById
        self._processMap["removeByBox"] = Processor.process_removeByBox
        self._processMap["removeByInner"] = Processor.process_removeByInner
        self._processMap["removeByDestination"] = Processor.process_removeByDestination

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_create(self, seqid, iprot, oprot):
        args = create_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_result()
        try:
            self._handler.create(args.boxId, args.innerPath, args.destination, args.linkType)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_lsAll(self, seqid, iprot, oprot):
        args = lsAll_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = lsAll_result()
        try:
            result.success = self._handler.lsAll()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("lsAll", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_lsBox(self, seqid, iprot, oprot):
        args = lsBox_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = lsBox_result()
        try:
            result.success = self._handler.lsBox(args.boxId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("lsBox", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_lsInner(self, seqid, iprot, oprot):
        args = lsInner_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = lsInner_result()
        try:
            result.success = self._handler.lsInner(args.boxId, args.innerPath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("lsInner", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_removeAll(self, seqid, iprot, oprot):
        args = removeAll_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeAll_result()
        try:
            self._handler.removeAll()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("removeAll", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_removeById(self, seqid, iprot, oprot):
        args = removeById_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeById_result()
        try:
            self._handler.removeById(args.id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("removeById", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_removeByBox(self, seqid, iprot, oprot):
        args = removeByBox_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeByBox_result()
        try:
            self._handler.removeByBox(args.boxId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("removeByBox", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_removeByInner(self, seqid, iprot, oprot):
        args = removeByInner_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeByInner_result()
        try:
            self._handler.removeByInner(args.boxId, args.innerPath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("removeByInner", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_removeByDestination(self, seqid, iprot, oprot):
        args = removeByDestination_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = removeByDestination_result()
        try:
            self._handler.removeByDestination(args.destination)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("removeByDestination", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class create_args(object):
    """
    Attributes:
     - boxId
     - innerPath
     - destination
     - linkType
    """


    def __init__(self, boxId=None, innerPath=None, destination=None, linkType=None,):
        self.boxId = boxId
        self.innerPath = innerPath
        self.destination = destination
        self.linkType = linkType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.innerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.destination = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.linkType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        if self.innerPath is not None:
            oprot.writeFieldBegin('innerPath', TType.STRING, 2)
            oprot.writeString(self.innerPath.encode('utf-8') if sys.version_info[0] == 2 else self.innerPath)
            oprot.writeFieldEnd()
        if self.destination is not None:
            oprot.writeFieldBegin('destination', TType.STRING, 3)
            oprot.writeString(self.destination.encode('utf-8') if sys.version_info[0] == 2 else self.destination)
            oprot.writeFieldEnd()
        if self.linkType is not None:
            oprot.writeFieldBegin('linkType', TType.I32, 4)
            oprot.writeI32(self.linkType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_args)
create_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
    (2, TType.STRING, 'innerPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'destination', 'UTF8', None, ),  # 3
    (4, TType.I32, 'linkType', None, None, ),  # 4
)


class create_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_result)
create_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class lsAll_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('lsAll_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(lsAll_args)
lsAll_args.thrift_spec = (
)


class lsAll_result(object):
    """
    Attributes:
     - success
     - excp
    """


    def __init__(self, success=None, excp=None,):
        self.success = success
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = Link()
                        _elem19.read(iprot)
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('lsAll_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter20 in self.success:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(lsAll_result)
lsAll_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Link, None], False), None, ),  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class lsBox_args(object):
    """
    Attributes:
     - boxId
    """


    def __init__(self, boxId=None,):
        self.boxId = boxId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('lsBox_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(lsBox_args)
lsBox_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
)


class lsBox_result(object):
    """
    Attributes:
     - success
     - excp
    """


    def __init__(self, success=None, excp=None,):
        self.success = success
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = Link()
                        _elem26.read(iprot)
                        self.success.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('lsBox_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter27 in self.success:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(lsBox_result)
lsBox_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Link, None], False), None, ),  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class lsInner_args(object):
    """
    Attributes:
     - boxId
     - innerPath
    """


    def __init__(self, boxId=None, innerPath=None,):
        self.boxId = boxId
        self.innerPath = innerPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.innerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('lsInner_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        if self.innerPath is not None:
            oprot.writeFieldBegin('innerPath', TType.STRING, 2)
            oprot.writeString(self.innerPath.encode('utf-8') if sys.version_info[0] == 2 else self.innerPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(lsInner_args)
lsInner_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
    (2, TType.STRING, 'innerPath', 'UTF8', None, ),  # 2
)


class lsInner_result(object):
    """
    Attributes:
     - success
     - excp
    """


    def __init__(self, success=None, excp=None,):
        self.success = success
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = Link()
                        _elem33.read(iprot)
                        self.success.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('lsInner_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter34 in self.success:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(lsInner_result)
lsInner_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [Link, None], False), None, ),  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class removeAll_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeAll_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeAll_args)
removeAll_args.thrift_spec = (
)


class removeAll_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeAll_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeAll_result)
removeAll_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class removeById_args(object):
    """
    Attributes:
     - id
    """


    def __init__(self, id=None,):
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeById_args')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeById_args)
removeById_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
)


class removeById_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeById_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeById_result)
removeById_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class removeByBox_args(object):
    """
    Attributes:
     - boxId
    """


    def __init__(self, boxId=None,):
        self.boxId = boxId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeByBox_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeByBox_args)
removeByBox_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
)


class removeByBox_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeByBox_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeByBox_result)
removeByBox_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class removeByInner_args(object):
    """
    Attributes:
     - boxId
     - innerPath
    """


    def __init__(self, boxId=None, innerPath=None,):
        self.boxId = boxId
        self.innerPath = innerPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.innerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeByInner_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        if self.innerPath is not None:
            oprot.writeFieldBegin('innerPath', TType.STRING, 2)
            oprot.writeString(self.innerPath.encode('utf-8') if sys.version_info[0] == 2 else self.innerPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeByInner_args)
removeByInner_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
    (2, TType.STRING, 'innerPath', 'UTF8', None, ),  # 2
)


class removeByInner_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeByInner_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeByInner_result)
removeByInner_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class removeByDestination_args(object):
    """
    Attributes:
     - destination
    """


    def __init__(self, destination=None,):
        self.destination = destination

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.destination = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeByDestination_args')
        if self.destination is not None:
            oprot.writeFieldBegin('destination', TType.STRING, 1)
            oprot.writeString(self.destination.encode('utf-8') if sys.version_info[0] == 2 else self.destination)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeByDestination_args)
removeByDestination_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'destination', 'UTF8', None, ),  # 1
)


class removeByDestination_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('removeByDestination_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(removeByDestination_result)
removeByDestination_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

