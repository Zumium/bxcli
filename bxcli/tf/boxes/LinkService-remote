#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from boxes import LinkService
from boxes.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void create(i64 boxId, string innerPath, string destination, LinkType linkType)')
    print('   lsAll()')
    print('   lsBox(i64 boxId)')
    print('   lsInner(i64 boxId, string innerPath)')
    print('  void removeAll()')
    print('  void removeById(i64 id)')
    print('  void removeByBox(i64 boxId)')
    print('  void removeByInner(i64 boxId, string innerPath)')
    print('  void removeByDestination(string destination)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = LinkService.Client(protocol)
transport.open()

if cmd == 'create':
    if len(args) != 4:
        print('create requires 4 args')
        sys.exit(1)
    pp.pprint(client.create(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'lsAll':
    if len(args) != 0:
        print('lsAll requires 0 args')
        sys.exit(1)
    pp.pprint(client.lsAll())

elif cmd == 'lsBox':
    if len(args) != 1:
        print('lsBox requires 1 args')
        sys.exit(1)
    pp.pprint(client.lsBox(eval(args[0]),))

elif cmd == 'lsInner':
    if len(args) != 2:
        print('lsInner requires 2 args')
        sys.exit(1)
    pp.pprint(client.lsInner(eval(args[0]), args[1],))

elif cmd == 'removeAll':
    if len(args) != 0:
        print('removeAll requires 0 args')
        sys.exit(1)
    pp.pprint(client.removeAll())

elif cmd == 'removeById':
    if len(args) != 1:
        print('removeById requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeById(eval(args[0]),))

elif cmd == 'removeByBox':
    if len(args) != 1:
        print('removeByBox requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeByBox(eval(args[0]),))

elif cmd == 'removeByInner':
    if len(args) != 2:
        print('removeByInner requires 2 args')
        sys.exit(1)
    pp.pprint(client.removeByInner(eval(args[0]), args[1],))

elif cmd == 'removeByDestination':
    if len(args) != 1:
        print('removeByDestination requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeByDestination(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
