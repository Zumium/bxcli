#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def add(self, boxId, innerPath, outerPath, addBy):
        """
        Parameters:
         - boxId
         - innerPath
         - outerPath
         - addBy
        """
        pass

    def fetch(self, boxId, innerPath, outerPath, fetchBy):
        """
        Parameters:
         - boxId
         - innerPath
         - outerPath
         - fetchBy
        """
        pass

    def remove(self, boxId, innerPath):
        """
        Parameters:
         - boxId
         - innerPath
        """
        pass

    def ls(self, boxId, innerDir):
        """
        Parameters:
         - boxId
         - innerDir
        """
        pass

    def move(self, srcBoxId, srcInnerPath, dstBoxId, dstInnerPath):
        """
        Parameters:
         - srcBoxId
         - srcInnerPath
         - dstBoxId
         - dstInnerPath
        """
        pass

    def copy(self, srcBoxId, srcInnerPath, dstBoxId, dstInnerPath):
        """
        Parameters:
         - srcBoxId
         - srcInnerPath
         - dstBoxId
         - dstInnerPath
        """
        pass

    def innerMove(self, boxId, srcInnerPath, dstInnerPath):
        """
        Parameters:
         - boxId
         - srcInnerPath
         - dstInnerPath
        """
        pass

    def innerCopy(self, boxId, srcInnerPath, dstInnerPath):
        """
        Parameters:
         - boxId
         - srcInnerPath
         - dstInnerPath
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def add(self, boxId, innerPath, outerPath, addBy):
        """
        Parameters:
         - boxId
         - innerPath
         - outerPath
         - addBy
        """
        self.send_add(boxId, innerPath, outerPath, addBy)
        self.recv_add()

    def send_add(self, boxId, innerPath, outerPath, addBy):
        self._oprot.writeMessageBegin('add', TMessageType.CALL, self._seqid)
        args = add_args()
        args.boxId = boxId
        args.innerPath = innerPath
        args.outerPath = outerPath
        args.addBy = addBy
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def fetch(self, boxId, innerPath, outerPath, fetchBy):
        """
        Parameters:
         - boxId
         - innerPath
         - outerPath
         - fetchBy
        """
        self.send_fetch(boxId, innerPath, outerPath, fetchBy)
        self.recv_fetch()

    def send_fetch(self, boxId, innerPath, outerPath, fetchBy):
        self._oprot.writeMessageBegin('fetch', TMessageType.CALL, self._seqid)
        args = fetch_args()
        args.boxId = boxId
        args.innerPath = innerPath
        args.outerPath = outerPath
        args.fetchBy = fetchBy
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fetch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fetch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def remove(self, boxId, innerPath):
        """
        Parameters:
         - boxId
         - innerPath
        """
        self.send_remove(boxId, innerPath)
        self.recv_remove()

    def send_remove(self, boxId, innerPath):
        self._oprot.writeMessageBegin('remove', TMessageType.CALL, self._seqid)
        args = remove_args()
        args.boxId = boxId
        args.innerPath = innerPath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_remove(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = remove_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def ls(self, boxId, innerDir):
        """
        Parameters:
         - boxId
         - innerDir
        """
        self.send_ls(boxId, innerDir)
        return self.recv_ls()

    def send_ls(self, boxId, innerDir):
        self._oprot.writeMessageBegin('ls', TMessageType.CALL, self._seqid)
        args = ls_args()
        args.boxId = boxId
        args.innerDir = innerDir
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ls(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ls_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.excp is not None:
            raise result.excp
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ls failed: unknown result")

    def move(self, srcBoxId, srcInnerPath, dstBoxId, dstInnerPath):
        """
        Parameters:
         - srcBoxId
         - srcInnerPath
         - dstBoxId
         - dstInnerPath
        """
        self.send_move(srcBoxId, srcInnerPath, dstBoxId, dstInnerPath)
        self.recv_move()

    def send_move(self, srcBoxId, srcInnerPath, dstBoxId, dstInnerPath):
        self._oprot.writeMessageBegin('move', TMessageType.CALL, self._seqid)
        args = move_args()
        args.srcBoxId = srcBoxId
        args.srcInnerPath = srcInnerPath
        args.dstBoxId = dstBoxId
        args.dstInnerPath = dstInnerPath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_move(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = move_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def copy(self, srcBoxId, srcInnerPath, dstBoxId, dstInnerPath):
        """
        Parameters:
         - srcBoxId
         - srcInnerPath
         - dstBoxId
         - dstInnerPath
        """
        self.send_copy(srcBoxId, srcInnerPath, dstBoxId, dstInnerPath)
        self.recv_copy()

    def send_copy(self, srcBoxId, srcInnerPath, dstBoxId, dstInnerPath):
        self._oprot.writeMessageBegin('copy', TMessageType.CALL, self._seqid)
        args = copy_args()
        args.srcBoxId = srcBoxId
        args.srcInnerPath = srcInnerPath
        args.dstBoxId = dstBoxId
        args.dstInnerPath = dstInnerPath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_copy(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = copy_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def innerMove(self, boxId, srcInnerPath, dstInnerPath):
        """
        Parameters:
         - boxId
         - srcInnerPath
         - dstInnerPath
        """
        self.send_innerMove(boxId, srcInnerPath, dstInnerPath)
        self.recv_innerMove()

    def send_innerMove(self, boxId, srcInnerPath, dstInnerPath):
        self._oprot.writeMessageBegin('innerMove', TMessageType.CALL, self._seqid)
        args = innerMove_args()
        args.boxId = boxId
        args.srcInnerPath = srcInnerPath
        args.dstInnerPath = dstInnerPath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_innerMove(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = innerMove_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return

    def innerCopy(self, boxId, srcInnerPath, dstInnerPath):
        """
        Parameters:
         - boxId
         - srcInnerPath
         - dstInnerPath
        """
        self.send_innerCopy(boxId, srcInnerPath, dstInnerPath)
        self.recv_innerCopy()

    def send_innerCopy(self, boxId, srcInnerPath, dstInnerPath):
        self._oprot.writeMessageBegin('innerCopy', TMessageType.CALL, self._seqid)
        args = innerCopy_args()
        args.boxId = boxId
        args.srcInnerPath = srcInnerPath
        args.dstInnerPath = dstInnerPath
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_innerCopy(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = innerCopy_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.excp is not None:
            raise result.excp
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["add"] = Processor.process_add
        self._processMap["fetch"] = Processor.process_fetch
        self._processMap["remove"] = Processor.process_remove
        self._processMap["ls"] = Processor.process_ls
        self._processMap["move"] = Processor.process_move
        self._processMap["copy"] = Processor.process_copy
        self._processMap["innerMove"] = Processor.process_innerMove
        self._processMap["innerCopy"] = Processor.process_innerCopy

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_add(self, seqid, iprot, oprot):
        args = add_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_result()
        try:
            self._handler.add(args.boxId, args.innerPath, args.outerPath, args.addBy)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_fetch(self, seqid, iprot, oprot):
        args = fetch_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fetch_result()
        try:
            self._handler.fetch(args.boxId, args.innerPath, args.outerPath, args.fetchBy)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fetch", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_remove(self, seqid, iprot, oprot):
        args = remove_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = remove_result()
        try:
            self._handler.remove(args.boxId, args.innerPath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("remove", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ls(self, seqid, iprot, oprot):
        args = ls_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ls_result()
        try:
            result.success = self._handler.ls(args.boxId, args.innerDir)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ls", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_move(self, seqid, iprot, oprot):
        args = move_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = move_result()
        try:
            self._handler.move(args.srcBoxId, args.srcInnerPath, args.dstBoxId, args.dstInnerPath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("move", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_copy(self, seqid, iprot, oprot):
        args = copy_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = copy_result()
        try:
            self._handler.copy(args.srcBoxId, args.srcInnerPath, args.dstBoxId, args.dstInnerPath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("copy", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_innerMove(self, seqid, iprot, oprot):
        args = innerMove_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = innerMove_result()
        try:
            self._handler.innerMove(args.boxId, args.srcInnerPath, args.dstInnerPath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("innerMove", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_innerCopy(self, seqid, iprot, oprot):
        args = innerCopy_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = innerCopy_result()
        try:
            self._handler.innerCopy(args.boxId, args.srcInnerPath, args.dstInnerPath)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as excp:
            msg_type = TMessageType.REPLY
            result.excp = excp
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("innerCopy", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class add_args(object):
    """
    Attributes:
     - boxId
     - innerPath
     - outerPath
     - addBy
    """


    def __init__(self, boxId=None, innerPath=None, outerPath=None, addBy=None,):
        self.boxId = boxId
        self.innerPath = innerPath
        self.outerPath = outerPath
        self.addBy = addBy

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.innerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.outerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.addBy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        if self.innerPath is not None:
            oprot.writeFieldBegin('innerPath', TType.STRING, 2)
            oprot.writeString(self.innerPath.encode('utf-8') if sys.version_info[0] == 2 else self.innerPath)
            oprot.writeFieldEnd()
        if self.outerPath is not None:
            oprot.writeFieldBegin('outerPath', TType.STRING, 3)
            oprot.writeString(self.outerPath.encode('utf-8') if sys.version_info[0] == 2 else self.outerPath)
            oprot.writeFieldEnd()
        if self.addBy is not None:
            oprot.writeFieldBegin('addBy', TType.I32, 4)
            oprot.writeI32(self.addBy)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_args)
add_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
    (2, TType.STRING, 'innerPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'outerPath', 'UTF8', None, ),  # 3
    (4, TType.I32, 'addBy', None, None, ),  # 4
)


class add_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_result)
add_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class fetch_args(object):
    """
    Attributes:
     - boxId
     - innerPath
     - outerPath
     - fetchBy
    """


    def __init__(self, boxId=None, innerPath=None, outerPath=None, fetchBy=None,):
        self.boxId = boxId
        self.innerPath = innerPath
        self.outerPath = outerPath
        self.fetchBy = fetchBy

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.innerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.outerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.fetchBy = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetch_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        if self.innerPath is not None:
            oprot.writeFieldBegin('innerPath', TType.STRING, 2)
            oprot.writeString(self.innerPath.encode('utf-8') if sys.version_info[0] == 2 else self.innerPath)
            oprot.writeFieldEnd()
        if self.outerPath is not None:
            oprot.writeFieldBegin('outerPath', TType.STRING, 3)
            oprot.writeString(self.outerPath.encode('utf-8') if sys.version_info[0] == 2 else self.outerPath)
            oprot.writeFieldEnd()
        if self.fetchBy is not None:
            oprot.writeFieldBegin('fetchBy', TType.I32, 4)
            oprot.writeI32(self.fetchBy)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetch_args)
fetch_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
    (2, TType.STRING, 'innerPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'outerPath', 'UTF8', None, ),  # 3
    (4, TType.I32, 'fetchBy', None, None, ),  # 4
)


class fetch_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fetch_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fetch_result)
fetch_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class remove_args(object):
    """
    Attributes:
     - boxId
     - innerPath
    """


    def __init__(self, boxId=None, innerPath=None,):
        self.boxId = boxId
        self.innerPath = innerPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.innerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        if self.innerPath is not None:
            oprot.writeFieldBegin('innerPath', TType.STRING, 2)
            oprot.writeString(self.innerPath.encode('utf-8') if sys.version_info[0] == 2 else self.innerPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_args)
remove_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
    (2, TType.STRING, 'innerPath', 'UTF8', None, ),  # 2
)


class remove_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('remove_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(remove_result)
remove_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class ls_args(object):
    """
    Attributes:
     - boxId
     - innerDir
    """


    def __init__(self, boxId=None, innerDir=None,):
        self.boxId = boxId
        self.innerDir = innerDir

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.innerDir = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ls_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        if self.innerDir is not None:
            oprot.writeFieldBegin('innerDir', TType.STRING, 2)
            oprot.writeString(self.innerDir.encode('utf-8') if sys.version_info[0] == 2 else self.innerDir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ls_args)
ls_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
    (2, TType.STRING, 'innerDir', 'UTF8', None, ),  # 2
)


class ls_result(object):
    """
    Attributes:
     - success
     - excp
    """


    def __init__(self, success=None, excp=None,):
        self.success = success
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = LsItem()
                        _elem12.read(iprot)
                        self.success.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ls_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter13 in self.success:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ls_result)
ls_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [LsItem, None], False), None, ),  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class move_args(object):
    """
    Attributes:
     - srcBoxId
     - srcInnerPath
     - dstBoxId
     - dstInnerPath
    """


    def __init__(self, srcBoxId=None, srcInnerPath=None, dstBoxId=None, dstInnerPath=None,):
        self.srcBoxId = srcBoxId
        self.srcInnerPath = srcInnerPath
        self.dstBoxId = dstBoxId
        self.dstInnerPath = dstInnerPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.srcBoxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.srcInnerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.dstBoxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.dstInnerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('move_args')
        if self.srcBoxId is not None:
            oprot.writeFieldBegin('srcBoxId', TType.I64, 1)
            oprot.writeI64(self.srcBoxId)
            oprot.writeFieldEnd()
        if self.srcInnerPath is not None:
            oprot.writeFieldBegin('srcInnerPath', TType.STRING, 2)
            oprot.writeString(self.srcInnerPath.encode('utf-8') if sys.version_info[0] == 2 else self.srcInnerPath)
            oprot.writeFieldEnd()
        if self.dstBoxId is not None:
            oprot.writeFieldBegin('dstBoxId', TType.I64, 3)
            oprot.writeI64(self.dstBoxId)
            oprot.writeFieldEnd()
        if self.dstInnerPath is not None:
            oprot.writeFieldBegin('dstInnerPath', TType.STRING, 4)
            oprot.writeString(self.dstInnerPath.encode('utf-8') if sys.version_info[0] == 2 else self.dstInnerPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(move_args)
move_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'srcBoxId', None, None, ),  # 1
    (2, TType.STRING, 'srcInnerPath', 'UTF8', None, ),  # 2
    (3, TType.I64, 'dstBoxId', None, None, ),  # 3
    (4, TType.STRING, 'dstInnerPath', 'UTF8', None, ),  # 4
)


class move_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('move_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(move_result)
move_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class copy_args(object):
    """
    Attributes:
     - srcBoxId
     - srcInnerPath
     - dstBoxId
     - dstInnerPath
    """


    def __init__(self, srcBoxId=None, srcInnerPath=None, dstBoxId=None, dstInnerPath=None,):
        self.srcBoxId = srcBoxId
        self.srcInnerPath = srcInnerPath
        self.dstBoxId = dstBoxId
        self.dstInnerPath = dstInnerPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.srcBoxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.srcInnerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.dstBoxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.dstInnerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('copy_args')
        if self.srcBoxId is not None:
            oprot.writeFieldBegin('srcBoxId', TType.I64, 1)
            oprot.writeI64(self.srcBoxId)
            oprot.writeFieldEnd()
        if self.srcInnerPath is not None:
            oprot.writeFieldBegin('srcInnerPath', TType.STRING, 2)
            oprot.writeString(self.srcInnerPath.encode('utf-8') if sys.version_info[0] == 2 else self.srcInnerPath)
            oprot.writeFieldEnd()
        if self.dstBoxId is not None:
            oprot.writeFieldBegin('dstBoxId', TType.I64, 3)
            oprot.writeI64(self.dstBoxId)
            oprot.writeFieldEnd()
        if self.dstInnerPath is not None:
            oprot.writeFieldBegin('dstInnerPath', TType.STRING, 4)
            oprot.writeString(self.dstInnerPath.encode('utf-8') if sys.version_info[0] == 2 else self.dstInnerPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(copy_args)
copy_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'srcBoxId', None, None, ),  # 1
    (2, TType.STRING, 'srcInnerPath', 'UTF8', None, ),  # 2
    (3, TType.I64, 'dstBoxId', None, None, ),  # 3
    (4, TType.STRING, 'dstInnerPath', 'UTF8', None, ),  # 4
)


class copy_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('copy_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(copy_result)
copy_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class innerMove_args(object):
    """
    Attributes:
     - boxId
     - srcInnerPath
     - dstInnerPath
    """


    def __init__(self, boxId=None, srcInnerPath=None, dstInnerPath=None,):
        self.boxId = boxId
        self.srcInnerPath = srcInnerPath
        self.dstInnerPath = dstInnerPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.srcInnerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.dstInnerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('innerMove_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        if self.srcInnerPath is not None:
            oprot.writeFieldBegin('srcInnerPath', TType.STRING, 2)
            oprot.writeString(self.srcInnerPath.encode('utf-8') if sys.version_info[0] == 2 else self.srcInnerPath)
            oprot.writeFieldEnd()
        if self.dstInnerPath is not None:
            oprot.writeFieldBegin('dstInnerPath', TType.STRING, 3)
            oprot.writeString(self.dstInnerPath.encode('utf-8') if sys.version_info[0] == 2 else self.dstInnerPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(innerMove_args)
innerMove_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
    (2, TType.STRING, 'srcInnerPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'dstInnerPath', 'UTF8', None, ),  # 3
)


class innerMove_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('innerMove_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(innerMove_result)
innerMove_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)


class innerCopy_args(object):
    """
    Attributes:
     - boxId
     - srcInnerPath
     - dstInnerPath
    """


    def __init__(self, boxId=None, srcInnerPath=None, dstInnerPath=None,):
        self.boxId = boxId
        self.srcInnerPath = srcInnerPath
        self.dstInnerPath = dstInnerPath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.boxId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.srcInnerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.dstInnerPath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('innerCopy_args')
        if self.boxId is not None:
            oprot.writeFieldBegin('boxId', TType.I64, 1)
            oprot.writeI64(self.boxId)
            oprot.writeFieldEnd()
        if self.srcInnerPath is not None:
            oprot.writeFieldBegin('srcInnerPath', TType.STRING, 2)
            oprot.writeString(self.srcInnerPath.encode('utf-8') if sys.version_info[0] == 2 else self.srcInnerPath)
            oprot.writeFieldEnd()
        if self.dstInnerPath is not None:
            oprot.writeFieldBegin('dstInnerPath', TType.STRING, 3)
            oprot.writeString(self.dstInnerPath.encode('utf-8') if sys.version_info[0] == 2 else self.dstInnerPath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(innerCopy_args)
innerCopy_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'boxId', None, None, ),  # 1
    (2, TType.STRING, 'srcInnerPath', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'dstInnerPath', 'UTF8', None, ),  # 3
)


class innerCopy_result(object):
    """
    Attributes:
     - excp
    """


    def __init__(self, excp=None,):
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.excp = ServiceException()
                    self.excp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('innerCopy_result')
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRUCT, 1)
            self.excp.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(innerCopy_result)
innerCopy_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'excp', [ServiceException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

